{"version":3,"sources":["../src/index.js"],"names":["require","config","Telegraf","session","Stage","Scene","leave","Keyboard","Key","fastify","PORT","process","env","console","log","search","Search","mainKeyboard","make","greeter","enter","ctx","reply","command","on","then","scene","stage","register","bot","BOT_TOKEN","use","middleware","start","userId","update","message","chat","id","hears","callbackQuery","data","launch","get","request","hello","listen","info","server","address","port","error","exit"],"mappings":"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","sourcesContent":["require('dotenv').config()\nimport \"core-js/stable\";\nimport \"regenerator-runtime/runtime\";\nconst { Telegraf } = require('telegraf')\nconst session = require('telegraf/session')\nconst Stage = require('telegraf/stage')\nconst Scene = require('telegraf/scenes/base')\nconst { leave } = Stage\nconst { Keyboard, Key } = require('telegram-keyboard') \nimport \"./cron\";\nimport { listSearches } from \"./cron\";\nimport {testSearches} from \"./cron\"\nimport { authenticate } from './firebase'\nimport { getSearches, trackSearch, doSearch, removeSearch } from './utils'\nimport { Search } from \"./searchClass\";\nconst fastify = require('fastify')()\n\nconst PORT = process.env.PORT || 3000;\nconsole.log(PORT)\n\nconst search = new Search()\n\nconst mainKeyboard = Keyboard.make([\n    ['Avvia nuova ricerca', 'Lista delle ricerche'],\n])\n\nauthenticate()\n\nconst greeter = new Scene('greeter')\ngreeter.enter((ctx) => ctx.reply(`💪🏻 Sono pronto. Dimmi il nome del prodotto che vuoi cercare.\n\n/cancel`))\ngreeter.command('cancel',() => {\n    console.log(\"leave\")\n    leave()\n})\ngreeter.on('message', async (ctx) => doSearch(ctx, search).then(() =>  { console.log(\"leave\"); ctx.scene.leave('greeter')} ))\n// Create scene manager\nconst stage = new Stage()\nstage.command('cancel', leave())\n\n// Scene registration\nstage.register(greeter)\n\nconst bot = new Telegraf(process.env.BOT_TOKEN)\n\nbot.use(session());\nbot.use(stage.middleware());\n\nbot.start(async (ctx) => {\n    try {\n        await ctx.reply('Usa i tasti funzione o digita / per visualizzare i comandi', mainKeyboard.reply())\n    } catch (e) {\n        console.log(e)\n    }\n})\n\n\nbot.command('avvia', (ctx) => ctx.scene.enter('greeter') )\nbot.command('lista', (ctx) => {\n    const userId = ctx.update.message.chat.id\n    getSearches({ctx, userId})\n})\nbot.hears('Avvia nuova ricerca', (ctx) => ctx.scene.enter('greeter'))\nbot.hears('Lista delle ricerche', (ctx) => {\n    const userId = ctx.update.message.chat.id\n    getSearches({ctx, userId})\n})\n\nbot.on('callback_query', (ctx) => {\n    const userId = ctx.callbackQuery.message.chat.id\n\n    switch (ctx.callbackQuery.data) {\n        case 'Monitora Ricerca':\n            return trackSearch({search, userId, ctx})\n        case 'Nuova Ricerca':\n            return ctx.scene.enter('greeter')\n        case 'Smetti di Monitorare':\n            return getSearches({ctx, userId})\n        case 'Continua a Monitorare':\n            return ctx.reply('Perfetto! Riceverai un aggiornamento quotidiano su questa ricerca! 💪🏻');\n        case 'Annulla':\n            break;\n        default:\n            return removeSearch({ctx, userId});\n    }\n})\n\nbot.launch()\n\nfastify.get('/', async (request, reply) => {\n    return { hello: 'world' }\n})\n\n/*fastify.get('/search', async (request, reply) => {\n    return testSearches()\n})\n\nfastify.get('/list-search', async (request, reply) => {\n    listSearches()\n    return { hello: 'world' }\n})*/\n  \n  \n// Run the server!\nconst start = async () => {\n    console.log(\"start\")\n    try {\n        await fastify.listen(PORT, '0.0.0.0')\n        fastify.log.info(`server listening on ${fastify.server.address().port}`)\n    } catch (err) {\n        fastify.log.error(err)\n        process.exit(1)\n    }\n}\nstart()"],"file":"index.js"}