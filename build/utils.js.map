{"version":3,"sources":["../src/utils.js"],"names":["require","Keyboard","Key","getSearches","ctx","userId","then","res","length","keyboard","make","inline","reply","trackSearch","search","keyword","getKeyword","setKeyword","removeSearch","callbackQuery","data","replyWithMarkdown","doSearch","Promise","resolve","message","text","keywords","results","console","log","promises","map","item","undefined","prices","reduce","previousValue","currentValue","Price","DisplayAmount","SavingBasis","Savings","replyWithPhoto","url","caption","parse_mode","all"],"mappings":";;;;;;;;;;AACA;;AACA;;;;;;eAF0BA,OAAO,CAAC,mBAAD,C;IAAzBC,Q,YAAAA,Q;IAAUC,G,YAAAA,G;;AAIX,SAASC,WAAT,OAAsC;AAAA,MAAfC,GAAe,QAAfA,GAAe;AAAA,MAAVC,MAAU,QAAVA,MAAU;AACzC,gCAAeA,MAAf,EAAuBC,IAAvB,CAA4B,UAAAC,GAAG,EAAI;AAC/B,QAAIA,GAAG,CAACC,MAAJ,GAAa,CAAjB,EAAoB;AAChB,UAAMC,QAAQ,GAAGR,QAAQ,CAACS,IAAT,CAAc,CAC3BH,GAD2B,EAE3B,CAAC,SAAD,CAF2B,CAAd,EAGdI,MAHc,EAAjB;AAIAP,MAAAA,GAAG,CAACQ,KAAJ,CAAU,iEAAV,EAA6EH,QAA7E;AACH,KAND,MAMO;AACHL,MAAAA,GAAG,CAACQ,KAAJ,CAAU,yBAAV;AACH;AACJ,GAVD;AAWH;;AAEM,SAASC,WAAT,QAA8C;AAAA,MAAvBC,MAAuB,SAAvBA,MAAuB;AAAA,MAAfT,MAAe,SAAfA,MAAe;AAAA,MAAPD,GAAO,SAAPA,GAAO;AACjD,MAAMW,OAAO,GAAGD,MAAM,CAACE,UAAP,EAAhB;;AACA,MAAID,OAAO,KAAK,EAAhB,EAAoB;AAChB,kCAAeD,MAAM,CAACE,UAAP,EAAf,EAAoCX,MAApC;AACAS,IAAAA,MAAM,CAACG,UAAP,CAAkB,EAAlB;AACA,WAAOb,GAAG,CAACQ,KAAJ,CAAU,yEAAV,CAAP;AACH,GAJD,MAIO;AACH,WAAOR,GAAG,CAACQ,KAAJ,CAAU,qDAAV,CAAP;AACH;AACJ;;AAEM,SAASM,YAAT,QAAuC;AAAA,MAAfd,GAAe,SAAfA,GAAe;AAAA,MAAVC,MAAU,SAAVA,MAAU;AAC1C,kCAAiBD,GAAG,CAACe,aAAJ,CAAkBC,IAAnC,EAAyCf,MAAzC;AACA,SAAOD,GAAG,CAACiB,iBAAJ,kDAAsDjB,GAAG,CAACe,aAAJ,CAAkBC,IAAxE,OAAP;AACH;;SAEqBE,Q;;;;;sEAAf,kBAAwBlB,GAAxB,EAA6BU,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,8CACI,IAAIS,OAAJ;AAAA,kFAAY,iBAAgBC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACfV,wBAAAA,MAAM,CAACG,UAAP,CAAkBb,GAAG,CAACqB,OAAJ,CAAYC,IAA9B;AADe;AAAA,+BAETtB,GAAG,CAACiB,iBAAJ,kDAA2DjB,GAAG,CAACqB,OAAJ,CAAYC,IAAvE,OAFS;;AAAA;AAAA;AAAA,+BAGO,4BAAY;AAACC,0BAAAA,QAAQ,EAAEvB,GAAG,CAACqB,OAAJ,CAAYC;AAAvB,yBAAZ,CAHP;;AAAA;AAGTE,wBAAAA,OAHS;AAIfC,wBAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;;AAJe,8BAKX,CAACA,OAAD,IAAYA,OAAO,CAACpB,MAAR,KAAmB,CALpB;AAAA;AAAA;AAAA;;AAAA,yDAK8BgB,OAAO,CAAC,IAAD,CALrC;;AAAA;AAMTO,wBAAAA,QANS,GAMEH,OAAO,CAACI,GAAR,CAAY,UAAAC,IAAI,EAAI;AACjC,8BACIA,IAAI,CAAC,QAAD,CAAJ,KAAmBC,SAAnB,IACAD,IAAI,CAAC,QAAD,CAAJ,CAAe,UAAf,MAA+BC,SAFnC,EAGE;AAEE,gCAAMC,MAAM,GAAGF,IAAI,CAAC,QAAD,CAAJ,CAAe,UAAf,EAA2BG,MAA3B,CAAkC,UAACC,aAAD,EAAgBC,YAAhB,EAAiC;AAC9ED,8BAAAA,aAAa,GAAGA,aAAa,+BACzCC,YAAY,CAACC,KAAb,CAAmBC,aADsB,kBACDF,YAAY,CAACG,WAAb,sBAAuCH,YAAY,CAACG,WAAb,CAAyBD,aAAhE,kBAA4F,EAD3F,cACiGF,YAAY,CAACC,KAAb,CAAmBG,OAAnB,uBAA0CJ,YAAY,CAACC,KAAb,CAAmBG,OAAnB,CAA2BF,aAArE,IAAuF,EADxL,2BAA7B;AAGA,qCAAOH,aAAP;AACH,6BALc,EAKZ,EALY,CAAf;AAQJ,mCAAOjC,GAAG,CAACuC,cAAJ,CACH;AAAEC,8BAAAA,GAAG,EAAEX,IAAI,CAAC,QAAD,CAAJ,CAAe,SAAf,EAA0B,OAA1B,EAAmC,KAAnC;AAAP,6BADG,EAEH;AACAY,8BAAAA,OAAO,eAAQZ,IAAI,CAAC,UAAD,CAAJ,CAAiB,OAAjB,EAA0B,cAA1B,CAAR,mBACrBE,MADqB,wCAEhBF,IAAI,CAAC,eAAD,CAFY,CADP;AAIAa,8BAAAA,UAAU,EAAE;AAJZ,6BAFG,CAAP;AASC;AACJ,yBAxBgB,CANF;AAgCTrC,wBAAAA,QAhCS,GAgCER,QAAQ,CAACS,IAAT,CAAc,CAC3B,CAAC,kBAAD,EAAqB,eAArB,CAD2B,CAAd,EAEdC,MAFc,EAhCF;AAoCfY,wBAAAA,OAAO,CAACwB,GAAR,CAAYhB,QAAZ,EAAsBzB,IAAtB,CAA2B,YAAM;AAC7BF,0BAAAA,GAAG,CAACQ,KAAJ,CAAU,mDAAV,EAA8DH,QAA9D;AACAe,0BAAAA,OAAO,CAAC,IAAD,CAAP;AAAc,yBAFlB;;AApCe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;;AAAA;AAAA;AAAA;AAAA,gBADJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["const { Keyboard, Key } = require('telegram-keyboard')\nimport { listUserSearch, saveUserSearch, removeUserSearch } from './firebase'\nimport { searchItems } from './amazonApi'\n\nexport function getSearches({ ctx, userId }) {\n    listUserSearch(userId).then(res => {\n        if (res.length > 0) {\n            const keyboard = Keyboard.make([\n                res,\n                ['Annulla']\n            ]).inline()\n            ctx.reply('Clicca sulla parola chiave che desideri smettere di monitorare:', keyboard);\n        } else {\n            ctx.reply('Non hai ricerche attive');\n        }\n    })\n}\n\nexport function trackSearch({ search, userId, ctx }) {\n    const keyword = search.getKeyword();\n    if (keyword !== '') {\n        saveUserSearch(search.getKeyword(), userId)\n        search.setKeyword('')\n        return ctx.reply('Perfetto! Riceverai un aggiornamento quotidiano su questa ricerca! 💪🏻');\n    } else {\n        return ctx.reply('👻  Questa chiave di ricerca non è più disponibile.');\n    }\n}\n\nexport function removeSearch({ ctx, userId }) {\n    removeUserSearch(ctx.callbackQuery.data, userId)\n    return ctx.replyWithMarkdown(`👻  Ho eliminato la ricerca *${ctx.callbackQuery.data}*`);\n}\n\nexport async function doSearch(ctx, search) {\n    return new Promise(async function (resolve) {\n        search.setKeyword(ctx.message.text)\n        await ctx.replyWithMarkdown(`✅ Ecco i risultati della ricerca *${ctx.message.text}*`)\n        const results = await searchItems({keywords: ctx.message.text})\n        console.log(results)\n        if (!results || results.length === 0) return resolve(true)\n        const promises = results.map(item => {\n            if (\n                item['Offers'] !== undefined &&\n                item['Offers']['Listings'] !== undefined\n            ) {\n                \n                const prices = item['Offers']['Listings'].reduce((previousValue, currentValue) => {\n                    previousValue = previousValue + `\n💶 <b>${currentValue.Price.DisplayAmount}</b> ${currentValue.SavingBasis ? `<strike> ${currentValue.SavingBasis.DisplayAmount} </strike>` : ''} ${currentValue.Price.Savings ? `Sconto di ${currentValue.Price.Savings.DisplayAmount}` : ''}\n                    `\n                    return previousValue;\n                }, '');\n            \n\n            return ctx.replyWithPhoto(\n                { url: item['Images']['Primary']['Large']['URL'] },\n                {\n                caption: `<b>${item['ItemInfo']['Title']['DisplayValue']}</b>\n${prices}\n👉🏻 ${item['DetailPageURL']}`,\n                parse_mode: 'HTML'\n                }\n            )\n            }\n        })\n\n        const keyboard = Keyboard.make([\n            ['Monitora Ricerca', 'Nuova Ricerca'],\n        ]).inline()\n\n        Promise.all(promises).then(() => {\n            ctx.reply('✅ La ricerca è completata, cosa vuoi fare adesso?',keyboard) \n            resolve(true)})\n        }\n    )\n}"],"file":"utils.js"}